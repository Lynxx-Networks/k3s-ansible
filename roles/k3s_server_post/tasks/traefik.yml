---
- name: Create manifests directory for temp configuration
  file:
    path: /tmp/k3s
    state: directory
    owner: "{{ ansible_user_id }}"
    mode: 0755
  run_once: true

- name: Ensure ingress-traefik namespace exists
  command: >
    k3s kubectl create namespace ingress-traefik
  args:
    creates: /tmp/k3s/ingress-traefik-created
  register: create_namespace_result_traefik
  failed_when: create_namespace_result_traefik.rc != 0 and "already exists" not in create_namespace_result_traefik.stderr
  changed_when: create_namespace_result_traefik.rc == 0
  run_once: true

- name: Add traefik resource definitions
  command: >-
    k3s kubectl apply -f https://raw.githubusercontent.com/traefik/traefik/v3.1/docs/content/reference/dynamic-configuration/kubernetes-crd-definition-v1.yml
  register: this
  changed_when: false
  run_once: true
  until: this.rc == 0
  retries: 5

- name: Install RBAC for Traefik
  command: >-
    k3s kubectl apply -f https://raw.githubusercontent.com/traefik/traefik/v3.1/docs/content/reference/dynamic-configuration/kubernetes-crd-rbac.yml
  register: this
  changed_when: false
  run_once: true
  until: this.rc == 0
  retries: 5

# # Check if the StorageClass exists
# - name: Check if the StorageClass exists
#   command: kubectl get storageclass {{ 'donghorn-nfs' if use_external_nfs_storage else 'donghorn' }} --ignore-not-found
#   register: sc_exists
#   changed_when: false
#   run_once: true

# # Delete the existing StorageClass if it exists
# - name: Delete existing StorageClass if it exists
#   command: kubectl delete storageclass {{ 'donghorn-nfs' if use_external_nfs_storage else 'donghorn' }}
#   when: sc_exists.stdout != ''
#   run_once: true

# Choose the correct StorageClass template based on use_external_nfs_storage
- name: Create storage class for NFS or Longhorn
  template:
    src: "{{ 'traefik-deployment-template-storageclass-nfs.yaml.j2' if use_external_nfs_storage else 'traefik-deployment-template-storageclass.yaml.j2' }}"
    dest: "/tmp/k3s/00-storageclass.yaml"
    owner: "{{ ansible_user_id }}"
    mode: 0755
  run_once: true

- name: Deploy storage class for NFS or Longhorn
  command: >
    k3s kubectl apply -f /tmp/k3s/00-storageclass.yaml
  register: this
  changed_when: false
  run_once: true
  until: this.rc == 0
  retries: 5

# # Check if the PVC exists
# - name: Check if the PVC exists
#   command: kubectl get pvc traefik-acme-pvc -n ingress-traefik --ignore-not-found
#   register: pvc_exists
#   changed_when: false
#   run_once: true

# # Delete the existing PVC if it exists
# - name: Delete existing PVC if it exists
#   command: kubectl delete pvc traefik-acme-pvc -n ingress-traefik --grace-period=0 --force
#   when: pvc_exists.stdout != ''
#   run_once: true

- name: Create persistent volume for traefik certificates
  template:
    src: "traefik-deployment-template-pvc.yaml.j2"
    dest: "/tmp/k3s/00-pvc.yaml"
    owner: "{{ ansible_user_id }}"
    mode: 0755
  run_once: true

- name: Deploy persistent volume for traefik certificates
  command: >-
    k3s kubectl apply -f /tmp/k3s/00-pvc.yaml
  register: this
  changed_when: false
  run_once: true
  until: this.rc == 0
  retries: 5

- name: Create ingress resource for roles
  template:
    src: "traefik-deployment-template-role.yaml.j2"
    dest: "/tmp/k3s/00-role.yaml"
    owner: "{{ ansible_user_id }}"
    mode: 0755
  run_once: true

- name: Deploy traefik Ingress Controller role
  command: >-
    k3s kubectl apply -f /tmp/k3s/00-role.yaml
  register: this
  changed_when: false
  run_once: true
  until: this.rc == 0
  retries: 5

- name: Create ingress resource for account
  template:
    src: "traefik-deployment-template-account.yaml.j2"
    dest: "/tmp/k3s/00-account.yaml"
    owner: "{{ ansible_user_id }}"
    mode: 0755
  run_once: true

- name: Deploy traefik Ingress Controller account
  command: >-
    k3s kubectl apply -f /tmp/k3s/00-account.yaml
  register: this
  changed_when: false
  run_once: true
  until: this.rc == 0
  retries: 5

- name: Create ingress resource for binding
  template:
    src: "traefik-deployment-template-binding.yaml.j2"
    dest: "/tmp/k3s/00-role-binding.yaml"
    owner: "{{ ansible_user_id }}"
    mode: 0755
  run_once: true

- name: Deploy traefik Ingress Controller binding
  command: >-
    k3s kubectl apply -f /tmp/k3s/00-role-binding.yaml
  register: this
  changed_when: false
  run_once: true
  until: this.rc == 0
  retries: 5

- name: Create ingress resource for traefik
  template:
    src: "traefik-deployment-template-deployment.yaml.j2"
    dest: "/tmp/k3s/02-traefik.yaml"
    owner: "{{ ansible_user_id }}"
    mode: 0755
  run_once: true

- name: Deploy traefik Ingress Controller traefik
  command: >-
    k3s kubectl apply -f /tmp/k3s/02-traefik.yaml
  register: this
  changed_when: false
  run_once: true
  until: this.rc == 0
  retries: 5

- name: Create ingress resource for traefik services
  template:
    src: "traefik-deployment-template-traefik-services.yaml.j2"
    dest: "/tmp/k3s/02-traefik-services.yaml"
    owner: "{{ ansible_user_id }}"
    mode: 0755
  run_once: true

- name: Deploy traefik Ingress Controller traefik services
  command: >-
    k3s kubectl apply -f /tmp/k3s/02-traefik-services.yaml
  register: this
  changed_when: false
  run_once: true
  until: this.rc == 0
  retries: 5

# - name: Create ingress resource for whoami
#   template:
#     src: "traefik-deployment-template-whoami.yaml.j2"
#     dest: "/tmp/k3s/03-whoami.yaml"
#     owner: "{{ ansible_user_id }}"
#     mode: 0755
#   run_once: true

# - name: Deploy traefik Ingress Controller whoami
#   command: >-
#     k3s kubectl apply -f /tmp/k3s/03-whoami.yaml
#   register: this
#   changed_when: false
#   run_once: true
#   until: this.rc == 0
#   retries: 5

# - name: Create ingress resource for whoami services
#   template:
#     src: "traefik-deployment-template-whoami-services.yaml.j2"
#     dest: "/tmp/k3s/03-whoami-services.yaml"
#     owner: "{{ ansible_user_id }}"
#     mode: 0755
#   run_once: true

# - name: Deploy traefik Ingress Controller whoami services
#   command: >-
#     k3s kubectl apply -f /tmp/k3s/03-whoami-services.yaml
#   register: this
#   changed_when: false
#   run_once: true
#   until: this.rc == 0
#   retries: 5

# - name: Create ingress resource for whoami ingress
#   template:
#     src: "traefik-deployment-template-whoami-ingress.yaml.j2"
#     dest: "/tmp/k3s/04-whoami-ingress.yaml"
#     owner: "{{ ansible_user_id }}"
#     mode: 0755
#   run_once: true

# - name: Deploy traefik Ingress Controller whoami ingress
#   command: >-
#     k3s kubectl apply -f /tmp/k3s/04-whoami-ingress.yaml
#   register: this
#   changed_when: false
#   run_once: true
#   until: this.rc == 0
#   retries: 5